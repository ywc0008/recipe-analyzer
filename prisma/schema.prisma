// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
  user              users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionToken])
}

model users {
  id            Int               @id @default(autoincrement())
  name          String?           @db.VarChar(255)
  email         String?           @db.VarChar(255)
  emailVerified DateTime?         @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  recipes       recipes[]
  
  @@unique([email])
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

model recipes {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  description      String?
  instructions     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           Int
  user             users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  nutritionAnalysis nutritionAnalysis?
  recipeIngredients recipeIngredients[]
}

model ingredients {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  caloriesPer100g   Float?
  proteinPer100g    Float?
  carbsPer100g      Float?
  fatPer100g        Float?
  unitOfMeasurement String?            @db.VarChar(50)
  recipeIngredients recipeIngredients[]
  
  @@unique([name])
}

model recipeIngredients {
  id           Int         @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float
  recipe       recipes     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, ingredientId])
}

model nutritionAnalysis {
  id                Int      @id @default(autoincrement())
  recipeId          Int      @unique
  totalCalories     Float
  totalProtein      Float
  totalCarbs        Float
  totalFat          Float
  proteinRatio      Float    @default(0)
  carbsRatio        Float    @default(0)
  fatRatio          Float    @default(0)
  servings          Int      @default(1)
  servingSuggestion String?
  nutritionAdvice   String?
  aiGeneratedAdvice String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  recipe            recipes  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}
